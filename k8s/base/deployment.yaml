apiVersion: apps/v1
kind: Deployment
metadata:
  name: svc-wallet
  annotations:
    argocd.argoproj.io/sync-wave: "50"   # mesh10→policy20→trading-api30→matching40→wallet50
spec:
  replicas: 2
  selector: { matchLabels: { app: svc-wallet } }
  template:
    metadata:
      labels: { app: svc-wallet }
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: svc-wallet
      containers:
        - name: app
          image: ghcr.io/2025-demo-01/svc-wallet:0.1.0
          ports: [{ name: http, containerPort: 8080 }]
          env:
            - { name: APP_ENV, valueFrom: { configMapKeyRef: { name: wallet-config, key: APP_ENV } } }
            - { name: BATCH_SIZE, valueFrom: { configMapKeyRef: { name: wallet-config, key: BATCH_SIZE } } }
            - { name: BATCH_WINDOW_MS, valueFrom: { configMapKeyRef: { name: wallet-config, key: BATCH_WINDOW_MS } } }
            - { name: TRADES_OUT_TOPIC, valueFrom: { configMapKeyRef: { name: wallet-config, key: TRADES_OUT_TOPIC } } }
            - { name: WALLET_TX_TOPIC, valueFrom: { configMapKeyRef: { name: wallet-config, key: WALLET_TX_TOPIC } } }
            - { name: KAFKA_GROUP_ID, valueFrom: { configMapKeyRef: { name: wallet-config, key: KAFKA_GROUP_ID } } }
            - { name: PG_DSN, valueFrom: { secretKeyRef: { name: wallet-secret, key: PG_DSN } } }
            - { name: KAFKA_BROKERS, valueFrom: { secretKeyRef: { name: wallet-secret, key: KAFKA_BROKERS } } }
          readinessProbe: { httpGet: { path: /readyz, port: 8080 }, initialDelaySeconds: 5, periodSeconds: 5 }
          livenessProbe:  { httpGet: { path: /healthz, port: 8080 }, initialDelaySeconds: 10, periodSeconds: 10 }
          resources:
            requests: { cpu: "200m", memory: "256Mi" }
            limits:   { cpu: "1",    memory: "512Mi" }
          securityContext:
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            seccompProfile: { type: RuntimeDefault }
            capabilities: { drop: ["ALL"] }
